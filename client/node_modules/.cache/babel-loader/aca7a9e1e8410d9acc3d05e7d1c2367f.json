{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Mission Control\\\\Desktop\\\\Choco\\\\client\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector } from 'react-redux';\nimport { getCurrentProfile } from '../../actions/profile';\nimport { loadUser } from '../../actions/auth';\nimport store from '../../store';\nimport UserLoadMessage from '../layout/userLoadMessage';\nimport { Button } from 'react-bootstrap'; // import useSelector from 'react-redux'\n// import { useDispatch } from 'react-redux'\n\nconst Dashboard = ({\n  getCurrentProfile,\n  auth: {\n    user\n  },\n  profile: {\n    profile,\n    loading\n  }\n}) => {\n  _s();\n\n  const userId = useSelector(state => state.auth.user);\n  useEffect(() => {\n    store.dispatch(loadUser());\n  }, []);\n  useEffect(() => {\n    if (userId !== null) {\n      getCurrentProfile();\n    }\n  }, [userId]);\n  return loading && profile === null ? /*#__PURE__*/_jsxDEV(UserLoadMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 40\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"large\",\n      children: \" Dashboard \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Welcome \", user && user.name, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this), profile !== null ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: \" you HAVE a profile \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" you DON'T HAVE any stonks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        href: \"/pick-stonks\",\n        variant: \"danger\",\n        children: \" Choose Stonks \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 62\n  }, this);\n};\n\n_s(Dashboard, \"Zfz63VhQDMIo+6sV+iDifa8sk9Y=\", false, function () {\n  return [useSelector];\n});\n\n_c = Dashboard;\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getCurrentProfile\n})(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Mission Control/Desktop/Choco/client/src/components/dashboard/Dashboard.js"],"names":["React","Fragment","useEffect","PropTypes","connect","useSelector","getCurrentProfile","loadUser","store","UserLoadMessage","Button","Dashboard","auth","user","profile","loading","userId","state","dispatch","name","propTypes","func","isRequired","object","mapStateToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,MAAT,QAAuB,iBAAvB,C,CACA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEL,EAAAA,iBAAF;AAAqBM,EAAAA,IAAI,EAAE;AAAEC,IAAAA;AAAF,GAA3B;AAAqCC,EAAAA,OAAO,EAAE;AAAEA,IAAAA,OAAF;AAAWC,IAAAA;AAAX;AAA9C,CAAD,KAA0E;AAAA;;AAC1F,QAAMC,MAAM,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACL,IAAN,CAAWC,IAArB,CAA1B;AACAX,EAAAA,SAAS,CAAC,MAAM;AAAEM,IAAAA,KAAK,CAACU,QAAN,CAAeX,QAAQ,EAAvB;AAA4B,GAArC,EAAuC,EAAvC,CAAT;AAEAL,EAAAA,SAAS,CAAC,MAAM;AAAE,QAAIc,MAAM,KAAK,IAAf,EAAqB;AAAEV,MAAAA,iBAAiB;AAAI;AAAE,GAAvD,EAAyD,CAACU,MAAD,CAAzD,CAAT;AAEA,SAAOD,OAAO,IAAID,OAAO,KAAK,IAAvB,gBAA8B,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,UAA9B,gBAAoD,QAAC,QAAD;AAAA,4BACzD;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADyD,eAEzD;AAAA,8BAAcD,IAAI,IAAIA,IAAI,CAACM,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFyD,EAGvDL,OAAO,KAAK,IAAZ,gBACA,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,gBAGA,QAAC,QAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,cAAb;AAA4B,QAAA,OAAO,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANuD;AAAA;AAAA;AAAA;AAAA;AAAA,UAA3D;AAYD,CAlBD;;GAAMH,S;UACWN,W;;;KADXM,S;AAoBNA,SAAS,CAACS,SAAV,GAAsB;AACpBd,EAAAA,iBAAiB,EAAEH,SAAS,CAACkB,IAAV,CAAeC,UADd;AAEpBV,EAAAA,IAAI,EAAET,SAAS,CAACoB,MAAV,CAAiBD,UAFH;AAGpBR,EAAAA,OAAO,EAAEX,SAAS,CAACoB,MAAV,CAAiBD;AAHN,CAAtB;;AAMA,MAAME,eAAe,GAAGP,KAAK,KAAK;AAChCL,EAAAA,IAAI,EAAEK,KAAK,CAACL,IADoB;AAEhCE,EAAAA,OAAO,EAAEG,KAAK,CAACH;AAFiB,CAAL,CAA7B;;AAIA,eAAeV,OAAO,CAACoB,eAAD,EAAkB;AAAElB,EAAAA;AAAF,CAAlB,CAAP,CAAgDK,SAAhD,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect, useSelector } from 'react-redux'\nimport { getCurrentProfile } from '../../actions/profile'\nimport { loadUser } from '../../actions/auth'\nimport store from '../../store'\nimport UserLoadMessage from '../layout/userLoadMessage'\nimport { Button } from 'react-bootstrap'\n// import useSelector from 'react-redux'\n// import { useDispatch } from 'react-redux'\n\nconst Dashboard = ({ getCurrentProfile, auth: { user }, profile: { profile, loading } }) => {\n  const userId = useSelector(state => state.auth.user)\n  useEffect(() => { store.dispatch(loadUser()) }, [])\n\n  useEffect(() => { if (userId !== null) { getCurrentProfile() } }, [userId])\n\n  return loading && profile === null ? <UserLoadMessage /> : <Fragment>\n    <h1 className='large'> Dashboard </h1>\n    <p> Welcome { user && user.name } </p>\n    { profile !== null ? (\n      <Fragment> you HAVE a profile </Fragment>\n    ) : (\n      <Fragment>\n        <p> you DON'T HAVE any stonks</p>\n        <Button href='/pick-stonks' variant='danger'> Choose Stonks </Button>\n      </Fragment>\n    )}\n  </Fragment>\n}\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n})\nexport default connect(mapStateToProps, { getCurrentProfile })(Dashboard)\n"]},"metadata":{},"sourceType":"module"}
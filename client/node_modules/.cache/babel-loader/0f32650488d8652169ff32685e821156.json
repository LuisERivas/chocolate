{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mission Control\\\\Desktop\\\\Choco\\\\client\\\\src\\\\components\\\\layout\\\\Alert.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // bring in connect\n\nimport { connect } from 'react-redux'; // creates the actual llert that uses the destrctured alerts from props (props.alerts = {alerts})\n\nconst Alert = ({\n  alerts\n}) => // map through alert, if alert is not equal to null and greater than 0, map through and return a div with a mesage inside\nalerts !== null && alerts.length > 0 && alerts.map(alert =>\n/*#__PURE__*/\n// key for the alert and the class name for the alert that is dynamic based on the alert type that comes in from register.js\n_jsxDEV(\"div\", {\n  className: `alert alert-${alert.alertType}`,\n  children: alert.msg\n}, alert.id, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 5\n}, this)); // gives a prop type to Alert\n\n\n_c = Alert;\nAlert.propTypes = {\n  // gives the proptype of array\n  alerts: PropTypes.array.isRequired\n}; // map state to props\n\nconst mapStateToProps = state => ({\n  alerts: state.Alert\n}); // adds connect to export\n\n\nexport default connect(mapStateToProps)(Alert);\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["C:/Users/Mission Control/Desktop/Choco/client/src/components/layout/Alert.js"],"names":["React","PropTypes","connect","Alert","alerts","length","map","alert","alertType","msg","id","propTypes","array","isRequired","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACd;AACEA,MAAM,KAAK,IAAX,IACAA,MAAM,CAACC,MAAP,GAAgB,CADhB,IAEAD,MAAM,CAACE,GAAP,CAAWC,KAAK;AAAA;AACd;AACA;AAAoB,EAAA,SAAS,EAAG,eAAcA,KAAK,CAACC,SAAU,EAA9D;AAAA,YACGD,KAAK,CAACE;AADT,GAAUF,KAAK,CAACG,EAAhB;AAAA;AAAA;AAAA;AAAA,QAFF,CAJF,C,CAUA;;;KAVMP,K;AAWNA,KAAK,CAACQ,SAAN,GAAkB;AAChB;AACAP,EAAAA,MAAM,EAAEH,SAAS,CAACW,KAAV,CAAgBC;AAFR,CAAlB,C,CAKA;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCX,EAAAA,MAAM,EAAEW,KAAK,CAACZ;AADkB,CAAL,CAA7B,C,CAIA;;;AACA,eAAeD,OAAO,CAACY,eAAD,CAAP,CAAyBX,KAAzB,CAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n// bring in connect\nimport { connect } from 'react-redux'\n\n// creates the actual llert that uses the destrctured alerts from props (props.alerts = {alerts})\nconst Alert = ({ alerts }) =>\n// map through alert, if alert is not equal to null and greater than 0, map through and return a div with a mesage inside\n  alerts !== null &&\n  alerts.length > 0 &&\n  alerts.map(alert => (\n    // key for the alert and the class name for the alert that is dynamic based on the alert type that comes in from register.js\n    <div key={alert.id} className={`alert alert-${alert.alertType}`}>\n      {alert.msg}\n    </div>\n  ))\n// gives a prop type to Alert\nAlert.propTypes = {\n  // gives the proptype of array\n  alerts: PropTypes.array.isRequired\n}\n\n// map state to props\nconst mapStateToProps = state => ({\n  alerts: state.Alert\n})\n\n// adds connect to export\nexport default connect(mapStateToProps)(Alert)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// import axios from 'axios'\n// import { REGISTER_SUCCESS, REGISTER_FAIL } from './types'\n// // bring in setAlert action\n// import { setAlert } from './alert'\n// // register user export with input of name, email, and password, then dispatch with header configuration\n// export const register = ({ name, email, password }) => async dispatch => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   }\n//   // set up body configureation by making name, email, and password into json format\n//   const body = JSON.stringify({ name, email, password })\n//   // try catch to dispatch infomration\n//   try {\n//     // asych send axios request to api/users as post with body and config\n//     const res = await axios.post('/api/users', body, config)\n//     // dispatch register success action type with payload of the res.data\n//     dispatch({\n//       type: REGISTER_SUCCESS,\n//       payload: res.data\n//     })\n//     // if there is an error when trying to dispatch the infomraiton\n//   } catch (err) {\n//     // establish errors as error response from data.errors\n//     const errors = err.response.data.errors\n//     console.log(errors)\n//     // if there is a value in errors then dispatch each error with message and alert\n//     if (errors) {\n//       console.log('oinkkkkeersss')\n//       errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n//     }\n//     // then dispatch register failed action\n//     dispatch({\n//       type: REGISTER_FAIL\n//     })\n//   }\n// }\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from './types'; // Load user\n\nexport const loadUser = () => async dispatch => {\n  // debugger\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n    console.log('log to see if this the problem');\n  } else {\n    try {\n      const res = await axios.get(process.env.PORT || 'http://localhost:5000/api/auth');\n      console.log('test');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }\n}; // register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    // const proxyUrl = 'https://infinite-castle-58852.herokuapp.com/'\n    // will set to whatever port is being used by host\n    const res = await axios.post(process.env.PORT || 'http://localhost:5000/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    // const proxyUrl = 'https://infinite-castle-58852.herokuapp.com/'\n    // will set to whatever port is being used by host\n    const res = await axios.post(process.env.PORT || 'http://localhost:5000/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // logout /clear profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Mission Control/Desktop/Choco/client/src/actions/auth.js"],"names":["axios","setAuthToken","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","loadUser","dispatch","localStorage","token","console","log","res","get","process","env","PORT","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["// import axios from 'axios'\n// import { REGISTER_SUCCESS, REGISTER_FAIL } from './types'\n// // bring in setAlert action\n// import { setAlert } from './alert'\n\n// // register user export with input of name, email, and password, then dispatch with header configuration\n// export const register = ({ name, email, password }) => async dispatch => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json'\n//     }\n//   }\n//   // set up body configureation by making name, email, and password into json format\n//   const body = JSON.stringify({ name, email, password })\n//   // try catch to dispatch infomration\n//   try {\n//     // asych send axios request to api/users as post with body and config\n//     const res = await axios.post('/api/users', body, config)\n//     // dispatch register success action type with payload of the res.data\n//     dispatch({\n//       type: REGISTER_SUCCESS,\n//       payload: res.data\n//     })\n//     // if there is an error when trying to dispatch the infomraiton\n//   } catch (err) {\n//     // establish errors as error response from data.errors\n//     const errors = err.response.data.errors\n//     console.log(errors)\n//     // if there is a value in errors then dispatch each error with message and alert\n//     if (errors) {\n//       console.log('oinkkkkeersss')\n//       errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n//     }\n//     // then dispatch register failed action\n//     dispatch({\n//       type: REGISTER_FAIL\n//     })\n//   }\n// }\n\nimport axios from 'axios'\nimport setAuthToken from '../utils/setAuthToken'\nimport { setAlert } from './alert'\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from './types'\n\n// Load user\nexport const loadUser = () => async dispatch => {\n  // debugger\n  if (localStorage.token) {\n    setAuthToken(localStorage.token)\n    console.log('log to see if this the problem')\n  } else {\n    try {\n      const res = await axios.get(process.env.PORT || 'http://localhost:5000/api/auth')\n      console.log('test')\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      })\n      dispatch(\n        loadUser()\n      )\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      })\n    }\n  }\n}\n// register user\n\nexport const register = ({ name, email, password }) => async dispatch => {\n  const config = {\n    headers: { 'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json' }\n  }\n  const body = JSON.stringify({ name, email, password })\n  try {\n    // const proxyUrl = 'https://infinite-castle-58852.herokuapp.com/'\n    // will set to whatever port is being used by host\n    const res = await axios.post(process.env.PORT || 'http://localhost:5000/api/users', body, config)\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    })\n    dispatch(\n      loadUser()\n    )\n  } catch (err) {\n    const errors = err.response.data.errors\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    })\n  }\n}\n\n// Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: { 'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json' }\n  }\n  const body = JSON.stringify({ email, password })\n  try {\n    // const proxyUrl = 'https://infinite-castle-58852.herokuapp.com/'\n    // will set to whatever port is being used by host\n    const res = await axios.post(process.env.PORT || 'http://localhost:5000/api/auth', body, config)\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    })\n  } catch (err) {\n    const errors = err.response.data.errors\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    })\n  }\n}\n\n// logout /clear profile\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
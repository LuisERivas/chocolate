{"ast":null,"code":"// bring in set types\nimport { SET_ALERT, REMOVE_ALERT } from '../actions/types'; // set initial state as empty\n\nconst initialState = []; // export fucntion that takes in that that is initial state and an action\n\nexport default function oink(state = initialState, action) {\n  // destructure action\n  const {\n    type,\n    payload\n  } = action; // evaluate actions based on their type\n\n  switch (type) {\n    // in case of set alert\n    case SET_ALERT:\n      // copy into array, alert that is given to us in state, and set alert with action.payload\n      return [...state, payload];\n\n    case REMOVE_ALERT:\n      // use filter to find a specific alert and see if alert id is NOT equal to the alert in the payload (filter through all alerts except the one that matches the payload)\n      return state.filter(alert => alert.id !== payload);\n    // default to simply returning the state\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Mission Control/Desktop/Choco/client/src/reducers/alert.js"],"names":["SET_ALERT","REMOVE_ALERT","initialState","oink","state","action","type","payload","filter","alert","id"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,YAApB,QAAwC,kBAAxC,C,CAEA;;AACA,MAAMC,YAAY,GAAG,EAArB,C,CAEA;;AACA,eAAe,SAASC,IAAT,CAAeC,KAAK,GAAGF,YAAvB,EAAqCG,MAArC,EAA6C;AAC1D;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B,CAF0D,CAG1D;;AACA,UAAQC,IAAR;AACE;AACA,SAAKN,SAAL;AACE;AACA,aAAO,CAAC,GAAGI,KAAJ,EAAWG,OAAX,CAAP;;AACF,SAAKN,YAAL;AACE;AACA,aAAOG,KAAK,CAACI,MAAN,CAAaC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaH,OAAnC,CAAP;AACA;;AACF;AACE,aAAOH,KAAP;AAVJ;AAYD","sourcesContent":["// bring in set types\nimport { SET_ALERT, REMOVE_ALERT } from '../actions/types'\n\n// set initial state as empty\nconst initialState = []\n\n// export fucntion that takes in that that is initial state and an action\nexport default function oink (state = initialState, action) {\n  // destructure action\n  const { type, payload } = action\n  // evaluate actions based on their type\n  switch (type) {\n    // in case of set alert\n    case SET_ALERT:\n      // copy into array, alert that is given to us in state, and set alert with action.payload\n      return [...state, payload]\n    case REMOVE_ALERT:\n      // use filter to find a specific alert and see if alert id is NOT equal to the alert in the payload (filter through all alerts except the one that matches the payload)\n      return state.filter(alert => alert.id !== payload)\n      // default to simply returning the state\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
This is a log of all Changes done

1.0: set up mongo database
1.1: Create express backend
1.10: created .gitignore
1.11: initialized app with npm init
1.12: install dependencies (npm i express express-validator bcryptjs config jsonwebtoken mongoose request)
1.13: install dev dependencies (npm i -D nodemon concurrently)
1.14: create entry file (server.js)
1.15: create scripts for running servers (package.json)
1.16: tested if server runs on npm run server command and tested get request for localhost:5000 on postman (both are good)

2.00: create config folder
2.01: create default.json in config folder
2.02: create db.js in config folder
2.03: added connectDB function to server.js that is being pulled from config/db.js
2.04: tested if the server connects the mongo db with npm run server (confirmed connection but need to fix deprecations)
2.05: added deprication fix on db.js (useNewUrlParser: true) *still getting other deprication warning*
2.06: added deprication fix on db.js (useUnifiedTopology: true) *No more deprication warnings*
2.07: branch pushed for merging 

3.00: Create folder in root called routes
3.01: inside routes folder create folder called API
3.02: inside of api folder create users.js, auth.js
3.03: create get route in user.js to test if route works
3.04: create get route in auth to test if the route works
3.05: add routes to server.js
3.06: test localhost:5000/api/users and /auth on postman to see if it checks out (Good to go)

4.00: create new folder in root called models
4.01: create new file in models folder called Users.js

5.00: added post request to api/user.js
5.01: initialize bodyparser middleware in server.js
5.02: test post request in postman (Good to go)
5.03: add validator to routes/api/user.js
5.04: test validator to see if its working (Good to go)


6.00: added user registration checks to user.js, called req.body information, bring in user model
6.01: added console log for error, added user exist check and response if doesnt pass
6.02: recieved depreciation error, fixed by adding useCreateIndex to config/db.js
6.04: added new object user creation to routes/api/user.js, brought in bcrypt to encrypt password
6.05: added salt to hash password, hashsed password, and saved user object, added temp response to confirm registration 
6.06: test on postman to see if user has registered (Good to go on postman and checked if data is on server)
6.07: recieved depreciation warning on attemtping to register some one whos email already exists, fixed by adding return to response that user already exists on routes/api/user.js (Good to go)
6.08: 

7.00: bring in jwt to routes/api/user.js, create payload to use with jwt, added jwt sign
7.01: added secret for jwt to config/default.json, bring in secret to routes/api/users.js
7.02: added jwt configureation and error handling
7.04: testing jwt showing token, failed, not sure why. (good to go) fixed by getting rid of console log that superceeded the token posting
7.05: tested token in jwt to make sure it works (good to go)

8.00: create folder in root called middleware, in middleware folder create auth.js
8.01: bring in dependencies of jwt and confit, then create module export, created check for if token is present
8.02: created check to see if token is valid if it is present
8.04: bring in middleware to api/auth.js, add auth to get request, test on postman to see if auth middleware works, tried without token and access was denied, (Good to go)
8.05: test on postman with token. (good to go) * make sure to test by using header and x-auth-token
8.06: bring in user model to api/auth.js, add async to get function, add try catch to pull the user infomration by id or cause failure message
8.07: test if modified get request will pull id by using token and x-auth-token (good to go)


9.00: created post api/auth to authenticate user and get token, brought in express validator, bcrypt, jwt, and config, 
9.01: test post request to api/auth with content-type header with value of application/json and raw body with email and password.
9.02: should get token back (good to go) Check to see if you get correct response with bad email and bad password (Good to go)
9.04: CHeck to see if given token works (GOod to go)


10.00: in git run npx create-react-app client
10.01: add scripts to root package.json for concurrently running client server and data base server
10.02: test if script works npm run dev (good to go)
10.04: install dependencdies into client with , npm i axios react-router-dom redux react-redux redux-thunk redux-devtools-extension moment react-moment
10.05: deleted readme and gitignore in client that was created when the app was created and ran rm -rf .git in client folder to get rid of any git stuff
10.06: addex proxy to client/package.json
10.07: tested npm run dev in root (Good to go)

11.00: Cleaned up client app by deleting src/app.test.js, index.css, and logo.svg, and reportwebvitals
11.01: go to index.js and remove reportwebvitals and index.css
11.02: removed logo from app.js and convert app function to an arrow function
11.04: test to make sure app still runs with changes made (Good to go)
11.05: Clear out app.css file, eddited title of public/index.html
11.06: created components folder in src folder and layout folder in components, then create Navbar.js and Landing.js
11.07: tried adding bootstrap react to client dependencies in app.js, and tested mavbar and landing components in app.js
11.08: Testing (good to go)

12.00: bring in browser router to app.js, user router to create path for landing page to shop up on '/'
12.01: created auth folder in components/layout with Login.js and Register.js files
12.02: test by importing register and login compoents in app.js. good to go on path localhost:3000/login and also good to go on localhost:3000/register
12.04: added container classname to section in app.js to format component in the center and tested to see if buttons will link to the right pages (good to go)
12.05: cleaned up links to register, login pages cleand up NaviBar
12.06: Links tested register, login, and home brand link all Good To Go 

13.00: bring in fragment to Register.js
13.01: created basic sign up form for register page
13.02: bring in useState hook, create default state values, added value and on change function to individual form inputs
13.04: added onsubmit to form tag 
13.05: created onSubmit function, test to see if message pops up when pass do not match. Did not work at first, fixed by changing e.preventdefault to e.preventDefault

14.00: set up login.js with state set up, destructring data, set up on change function, set up on submit function
14.01: CHeck to see that links to register and login work properly and that login button saves data to console
14.02: Good to go

15.00: in client/src, create store.js
15.01: bring in createStore, applyMiddleware and composeWithDevTools, thunk and rootreducer
15.02: create reducers folder inside of src, and create file called index.js
15.04: set initial state, bring in middlweare from thunk, create state store, setup export
15.05: bring in store to src/App.js and brin gin provider from react-redux, then wrap everything in the provider 
15.06: bring in combineReducers to src/reducers/index.js and add export, confirm that devtools come up on inspect in app (good to go)

16.00: create alert.js in reducers folder and bring in alert to reducers/index.js
16.01: in alert.js set initial state, create export function, set up switch to evaluate actions
16.02: in src create actions folder, and in actions folder, create types.js
16.04: set up types.js by sertting up export for alert types of set alert and remove alert
16.05: bring alert types into alert reducer and set up alerts in switch
16.06: create alert.js in src/actions, bring in set alert and remove alert
16.07: add uuid dependency to client with npm i uuid, add uuid import, sert up export of set alert with dispatch of information given
16.08:

17.00: bring in connect from react-redux to src/components/auth/Register.js, add connect to the export
17.01: had errors with uuid usage in actions/alert.js (fixed by chaing import line based on docummentation)
17.02: test to see if registering with unmatching passwords leads to seting of state to the message, type, and an id (Good to go)
17.04: Destructure props in register.js
17.05: in components/layout, create Alert.js, bring in connect, connect state to props
17.06: bring in proptypes to register.js and add proptype registration
17.07: embed alert.js into client/app.js by bringing in app.js, add mapstate to props to connect in alert js
17.08: test that alert pops up when bad password (Good to go)
17.09: in actions/alert.js create the time out for the alert. check to make sure the alert dissapears after 5 seconds. (Good to go)
17.09: change setAlert to take in msg, alertType and also timeout length and replaced fixed time period for time out in settimeout dispatch to the new timeout variable, Tested to see if new variable works (Good to Go)

secondAttemptAtAuthReducerAndRegisterAction
18.00: add register success and register fail to actions/types.js
18.01: create auth.js in reducers... import register success and register fail from actions
18.02: set upinitial state and set up export, create switch for how to handle the action type we hace in the state
18.04: create src/actions/auth.js, set up imports, create export, add set alert action to imports 
18.05: go to register.js from components/auth and import register from actions/auth add register to export at bottom add register to proptypes
18.06: Error when trying to trigger warnings for name, email, and password. fixed by changing the default server port from 5000 to 3000.

loadUserAndSetAuthToken
19.00: add userloaded and auth error to src/actions/types.js
19.01: add userloaeded and uath error to src/actions/auth.js, create setauthtoken.js in src/utils
19.02: import axios into setauthtoken, created set auth token function 
19.04: in src/actions/auth.js creat load user function
19.05: add userloaded and auth error to src/reducers/auth.js
19.06: add check for local storage token to app.js and add loadUser, add usereffect and useeffect function
19.07: 
19.08:

loadUserAndSetAuthToken
19.00: 
19.01: 
19.02: 
19.04: 
19.05: 
19.06: 
19.07: 
19.08: